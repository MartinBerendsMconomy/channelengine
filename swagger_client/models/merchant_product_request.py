# coding: utf-8

"""
    ChannelEngine API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MerchantProductRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, merchant_product_no=None, parent_merchant_product_no=None, name=None, description=None, brand=None, size=None, color=None, ean=None, manufacturer_product_number=None, stock=None, price=None, msrp=None, purchase_price=None, vat_rate_type=None, shipping_cost=None, shipping_time=None, url=None, image_url=None, category_trail=None, extra_data=None):
        """
        MerchantProductRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'merchant_product_no': 'str',
            'parent_merchant_product_no': 'str',
            'name': 'str',
            'description': 'str',
            'brand': 'str',
            'size': 'str',
            'color': 'str',
            'ean': 'str',
            'manufacturer_product_number': 'str',
            'stock': 'int',
            'price': 'float',
            'msrp': 'float',
            'purchase_price': 'float',
            'vat_rate_type': 'str',
            'shipping_cost': 'float',
            'shipping_time': 'str',
            'url': 'str',
            'image_url': 'str',
            'category_trail': 'str',
            'extra_data': 'list[ExtraDataItem]'
        }

        self.attribute_map = {
            'merchant_product_no': 'MerchantProductNo',
            'parent_merchant_product_no': 'ParentMerchantProductNo',
            'name': 'Name',
            'description': 'Description',
            'brand': 'Brand',
            'size': 'Size',
            'color': 'Color',
            'ean': 'Ean',
            'manufacturer_product_number': 'ManufacturerProductNumber',
            'stock': 'Stock',
            'price': 'Price',
            'msrp': 'MSRP',
            'purchase_price': 'PurchasePrice',
            'vat_rate_type': 'VatRateType',
            'shipping_cost': 'ShippingCost',
            'shipping_time': 'ShippingTime',
            'url': 'Url',
            'image_url': 'ImageUrl',
            'category_trail': 'CategoryTrail',
            'extra_data': 'ExtraData'
        }

        self._merchant_product_no = merchant_product_no
        self._parent_merchant_product_no = parent_merchant_product_no
        self._name = name
        self._description = description
        self._brand = brand
        self._size = size
        self._color = color
        self._ean = ean
        self._manufacturer_product_number = manufacturer_product_number
        self._stock = stock
        self._price = price
        self._msrp = msrp
        self._purchase_price = purchase_price
        self._vat_rate_type = vat_rate_type
        self._shipping_cost = shipping_cost
        self._shipping_time = shipping_time
        self._url = url
        self._image_url = image_url
        self._category_trail = category_trail
        self._extra_data = extra_data

    @property
    def merchant_product_no(self):
        """
        Gets the merchant_product_no of this MerchantProductRequest.
        A unique identifier of the product.

        :return: The merchant_product_no of this MerchantProductRequest.
        :rtype: str
        """
        return self._merchant_product_no

    @merchant_product_no.setter
    def merchant_product_no(self, merchant_product_no):
        """
        Sets the merchant_product_no of this MerchantProductRequest.
        A unique identifier of the product.

        :param merchant_product_no: The merchant_product_no of this MerchantProductRequest.
        :type: str
        """

        self._merchant_product_no = merchant_product_no

    @property
    def parent_merchant_product_no(self):
        """
        Gets the parent_merchant_product_no of this MerchantProductRequest.
        If this product is a different version of another  product (for example, all fields are the same except  size and/or color), then this field should contain  the 'MerchantProductNo' of the parent. The parent  should already exist (or be present between the products  in the content of the API call, it does not matter whether   the parent is behind the child in the list).

        :return: The parent_merchant_product_no of this MerchantProductRequest.
        :rtype: str
        """
        return self._parent_merchant_product_no

    @parent_merchant_product_no.setter
    def parent_merchant_product_no(self, parent_merchant_product_no):
        """
        Sets the parent_merchant_product_no of this MerchantProductRequest.
        If this product is a different version of another  product (for example, all fields are the same except  size and/or color), then this field should contain  the 'MerchantProductNo' of the parent. The parent  should already exist (or be present between the products  in the content of the API call, it does not matter whether   the parent is behind the child in the list).

        :param parent_merchant_product_no: The parent_merchant_product_no of this MerchantProductRequest.
        :type: str
        """

        self._parent_merchant_product_no = parent_merchant_product_no

    @property
    def name(self):
        """
        Gets the name of this MerchantProductRequest.

        :return: The name of this MerchantProductRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MerchantProductRequest.

        :param name: The name of this MerchantProductRequest.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this MerchantProductRequest.

        :return: The description of this MerchantProductRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MerchantProductRequest.

        :param description: The description of this MerchantProductRequest.
        :type: str
        """

        self._description = description

    @property
    def brand(self):
        """
        Gets the brand of this MerchantProductRequest.

        :return: The brand of this MerchantProductRequest.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """
        Sets the brand of this MerchantProductRequest.

        :param brand: The brand of this MerchantProductRequest.
        :type: str
        """

        self._brand = brand

    @property
    def size(self):
        """
        Gets the size of this MerchantProductRequest.

        :return: The size of this MerchantProductRequest.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this MerchantProductRequest.

        :param size: The size of this MerchantProductRequest.
        :type: str
        """

        self._size = size

    @property
    def color(self):
        """
        Gets the color of this MerchantProductRequest.

        :return: The color of this MerchantProductRequest.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this MerchantProductRequest.

        :param color: The color of this MerchantProductRequest.
        :type: str
        """

        self._color = color

    @property
    def ean(self):
        """
        Gets the ean of this MerchantProductRequest.

        :return: The ean of this MerchantProductRequest.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """
        Sets the ean of this MerchantProductRequest.

        :param ean: The ean of this MerchantProductRequest.
        :type: str
        """

        self._ean = ean

    @property
    def manufacturer_product_number(self):
        """
        Gets the manufacturer_product_number of this MerchantProductRequest.

        :return: The manufacturer_product_number of this MerchantProductRequest.
        :rtype: str
        """
        return self._manufacturer_product_number

    @manufacturer_product_number.setter
    def manufacturer_product_number(self, manufacturer_product_number):
        """
        Sets the manufacturer_product_number of this MerchantProductRequest.

        :param manufacturer_product_number: The manufacturer_product_number of this MerchantProductRequest.
        :type: str
        """

        self._manufacturer_product_number = manufacturer_product_number

    @property
    def stock(self):
        """
        Gets the stock of this MerchantProductRequest.

        :return: The stock of this MerchantProductRequest.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """
        Sets the stock of this MerchantProductRequest.

        :param stock: The stock of this MerchantProductRequest.
        :type: int
        """

        self._stock = stock

    @property
    def price(self):
        """
        Gets the price of this MerchantProductRequest.
        Price, including VAT.

        :return: The price of this MerchantProductRequest.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this MerchantProductRequest.
        Price, including VAT.

        :param price: The price of this MerchantProductRequest.
        :type: float
        """

        self._price = price

    @property
    def msrp(self):
        """
        Gets the msrp of this MerchantProductRequest.
        Manufacturer's suggested retail price

        :return: The msrp of this MerchantProductRequest.
        :rtype: float
        """
        return self._msrp

    @msrp.setter
    def msrp(self, msrp):
        """
        Sets the msrp of this MerchantProductRequest.
        Manufacturer's suggested retail price

        :param msrp: The msrp of this MerchantProductRequest.
        :type: float
        """

        self._msrp = msrp

    @property
    def purchase_price(self):
        """
        Gets the purchase_price of this MerchantProductRequest.

        :return: The purchase_price of this MerchantProductRequest.
        :rtype: float
        """
        return self._purchase_price

    @purchase_price.setter
    def purchase_price(self, purchase_price):
        """
        Sets the purchase_price of this MerchantProductRequest.

        :param purchase_price: The purchase_price of this MerchantProductRequest.
        :type: float
        """

        self._purchase_price = purchase_price

    @property
    def vat_rate_type(self):
        """
        Gets the vat_rate_type of this MerchantProductRequest.
        The type of VAT which applies to this product.  See: http://ec.europa.eu/taxation_customs/taxation/vat/topics/rates_en.htm

        :return: The vat_rate_type of this MerchantProductRequest.
        :rtype: str
        """
        return self._vat_rate_type

    @vat_rate_type.setter
    def vat_rate_type(self, vat_rate_type):
        """
        Sets the vat_rate_type of this MerchantProductRequest.
        The type of VAT which applies to this product.  See: http://ec.europa.eu/taxation_customs/taxation/vat/topics/rates_en.htm

        :param vat_rate_type: The vat_rate_type of this MerchantProductRequest.
        :type: str
        """
        allowed_values = ["STANDARD", "REDUCED", "SUPER_REDUCED"]
        if vat_rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vat_rate_type` ({0}), must be one of {1}"
                .format(vat_rate_type, allowed_values)
            )

        self._vat_rate_type = vat_rate_type

    @property
    def shipping_cost(self):
        """
        Gets the shipping_cost of this MerchantProductRequest.

        :return: The shipping_cost of this MerchantProductRequest.
        :rtype: float
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """
        Sets the shipping_cost of this MerchantProductRequest.

        :param shipping_cost: The shipping_cost of this MerchantProductRequest.
        :type: float
        """

        self._shipping_cost = shipping_cost

    @property
    def shipping_time(self):
        """
        Gets the shipping_time of this MerchantProductRequest.
        A textual representation of the shippingtime.  For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'

        :return: The shipping_time of this MerchantProductRequest.
        :rtype: str
        """
        return self._shipping_time

    @shipping_time.setter
    def shipping_time(self, shipping_time):
        """
        Sets the shipping_time of this MerchantProductRequest.
        A textual representation of the shippingtime.  For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'

        :param shipping_time: The shipping_time of this MerchantProductRequest.
        :type: str
        """

        self._shipping_time = shipping_time

    @property
    def url(self):
        """
        Gets the url of this MerchantProductRequest.
        A URL pointing to the merchant's webpage  which displays this product.

        :return: The url of this MerchantProductRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this MerchantProductRequest.
        A URL pointing to the merchant's webpage  which displays this product.

        :param url: The url of this MerchantProductRequest.
        :type: str
        """

        self._url = url

    @property
    def image_url(self):
        """
        Gets the image_url of this MerchantProductRequest.
        A URL at which an image of this product  can be found.

        :return: The image_url of this MerchantProductRequest.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this MerchantProductRequest.
        A URL at which an image of this product  can be found.

        :param image_url: The image_url of this MerchantProductRequest.
        :type: str
        """

        self._image_url = image_url

    @property
    def category_trail(self):
        """
        Gets the category_trail of this MerchantProductRequest.
        The category to which this product belongs.  Please supply this field in the following format:  'maincategory &gt; category &gt; subcategory'  For example:  'vehicles &gt; bikes &gt; mountainbike'

        :return: The category_trail of this MerchantProductRequest.
        :rtype: str
        """
        return self._category_trail

    @category_trail.setter
    def category_trail(self, category_trail):
        """
        Sets the category_trail of this MerchantProductRequest.
        The category to which this product belongs.  Please supply this field in the following format:  'maincategory &gt; category &gt; subcategory'  For example:  'vehicles &gt; bikes &gt; mountainbike'

        :param category_trail: The category_trail of this MerchantProductRequest.
        :type: str
        """

        self._category_trail = category_trail

    @property
    def extra_data(self):
        """
        Gets the extra_data of this MerchantProductRequest.
        An optional list of key-value pairs containing  extra data about this product. This data can be  sent to channels or used for filtering products.

        :return: The extra_data of this MerchantProductRequest.
        :rtype: list[ExtraDataItem]
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """
        Sets the extra_data of this MerchantProductRequest.
        An optional list of key-value pairs containing  extra data about this product. This data can be  sent to channels or used for filtering products.

        :param extra_data: The extra_data of this MerchantProductRequest.
        :type: list[ExtraDataItem]
        """

        self._extra_data = extra_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MerchantProductRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
