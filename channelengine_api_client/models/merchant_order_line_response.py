# coding: utf-8

"""
    ChannelEngine API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.4.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MerchantOrderLineResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'is_fulfillment_by_marketplace': 'bool',
        'merchant_product_no': 'str',
        'channel_product_no': 'str',
        'quantity': 'int',
        'unit_price_incl_vat': 'float',
        'fee_fixed': 'float',
        'fee_rate': 'float',
        'condition': 'str'
    }

    attribute_map = {
        'status': 'Status',
        'is_fulfillment_by_marketplace': 'IsFulfillmentByMarketplace',
        'merchant_product_no': 'MerchantProductNo',
        'channel_product_no': 'ChannelProductNo',
        'quantity': 'Quantity',
        'unit_price_incl_vat': 'UnitPriceInclVat',
        'fee_fixed': 'FeeFixed',
        'fee_rate': 'FeeRate',
        'condition': 'Condition'
    }

    def __init__(self, status=None, is_fulfillment_by_marketplace=None, merchant_product_no=None, channel_product_no=None, quantity=None, unit_price_incl_vat=None, fee_fixed=None, fee_rate=None, condition=None):  # noqa: E501
        """MerchantOrderLineResponse - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._is_fulfillment_by_marketplace = None
        self._merchant_product_no = None
        self._channel_product_no = None
        self._quantity = None
        self._unit_price_incl_vat = None
        self._fee_fixed = None
        self._fee_rate = None
        self._condition = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if is_fulfillment_by_marketplace is not None:
            self.is_fulfillment_by_marketplace = is_fulfillment_by_marketplace
        if merchant_product_no is not None:
            self.merchant_product_no = merchant_product_no
        self.channel_product_no = channel_product_no
        self.quantity = quantity
        self.unit_price_incl_vat = unit_price_incl_vat
        if fee_fixed is not None:
            self.fee_fixed = fee_fixed
        if fee_rate is not None:
            self.fee_rate = fee_rate
        if condition is not None:
            self.condition = condition

    @property
    def status(self):
        """Gets the status of this MerchantOrderLineResponse.  # noqa: E501


        :return: The status of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MerchantOrderLineResponse.


        :param status: The status of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "SHIPPED", "IN_BACKORDER", "CANCELED", "MANCO", "IN_COMBI", "CLOSED", "NEW", "RETURNED", "REQUIRES_CORRECTION"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_fulfillment_by_marketplace(self):
        """Gets the is_fulfillment_by_marketplace of this MerchantOrderLineResponse.  # noqa: E501


        :return: The is_fulfillment_by_marketplace of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_fulfillment_by_marketplace

    @is_fulfillment_by_marketplace.setter
    def is_fulfillment_by_marketplace(self, is_fulfillment_by_marketplace):
        """Sets the is_fulfillment_by_marketplace of this MerchantOrderLineResponse.


        :param is_fulfillment_by_marketplace: The is_fulfillment_by_marketplace of this MerchantOrderLineResponse.  # noqa: E501
        :type: bool
        """

        self._is_fulfillment_by_marketplace = is_fulfillment_by_marketplace

    @property
    def merchant_product_no(self):
        """Gets the merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501


        :return: The merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_product_no

    @merchant_product_no.setter
    def merchant_product_no(self, merchant_product_no):
        """Sets the merchant_product_no of this MerchantOrderLineResponse.


        :param merchant_product_no: The merchant_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """

        self._merchant_product_no = merchant_product_no

    @property
    def channel_product_no(self):
        """Gets the channel_product_no of this MerchantOrderLineResponse.  # noqa: E501


        :return: The channel_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_product_no

    @channel_product_no.setter
    def channel_product_no(self, channel_product_no):
        """Sets the channel_product_no of this MerchantOrderLineResponse.


        :param channel_product_no: The channel_product_no of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """
        if channel_product_no is None:
            raise ValueError("Invalid value for `channel_product_no`, must not be `None`")  # noqa: E501
        if channel_product_no is not None and len(channel_product_no) > 50:
            raise ValueError("Invalid value for `channel_product_no`, length must be less than or equal to `50`")  # noqa: E501
        if channel_product_no is not None and len(channel_product_no) < 0:
            raise ValueError("Invalid value for `channel_product_no`, length must be greater than or equal to `0`")  # noqa: E501

        self._channel_product_no = channel_product_no

    @property
    def quantity(self):
        """Gets the quantity of this MerchantOrderLineResponse.  # noqa: E501


        :return: The quantity of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this MerchantOrderLineResponse.


        :param quantity: The quantity of this MerchantOrderLineResponse.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def unit_price_incl_vat(self):
        """Gets the unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501

        The value of a single unit of the ordered product including VAT  (in the tenant's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :return: The unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_incl_vat

    @unit_price_incl_vat.setter
    def unit_price_incl_vat(self, unit_price_incl_vat):
        """Sets the unit_price_incl_vat of this MerchantOrderLineResponse.

        The value of a single unit of the ordered product including VAT  (in the tenant's base currency calculated using the exchange rate at the time of ordering).  # noqa: E501

        :param unit_price_incl_vat: The unit_price_incl_vat of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """
        if unit_price_incl_vat is None:
            raise ValueError("Invalid value for `unit_price_incl_vat`, must not be `None`")  # noqa: E501

        self._unit_price_incl_vat = unit_price_incl_vat

    @property
    def fee_fixed(self):
        """Gets the fee_fixed of this MerchantOrderLineResponse.  # noqa: E501

        A fixed fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.  # noqa: E501

        :return: The fee_fixed of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._fee_fixed

    @fee_fixed.setter
    def fee_fixed(self, fee_fixed):
        """Sets the fee_fixed of this MerchantOrderLineResponse.

        A fixed fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.  # noqa: E501

        :param fee_fixed: The fee_fixed of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._fee_fixed = fee_fixed

    @property
    def fee_rate(self):
        """Gets the fee_rate of this MerchantOrderLineResponse.  # noqa: E501

        A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.  # noqa: E501

        :return: The fee_rate of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: float
        """
        return self._fee_rate

    @fee_rate.setter
    def fee_rate(self, fee_rate):
        """Sets the fee_rate of this MerchantOrderLineResponse.

        A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.  # noqa: E501

        :param fee_rate: The fee_rate of this MerchantOrderLineResponse.  # noqa: E501
        :type: float
        """

        self._fee_rate = fee_rate

    @property
    def condition(self):
        """Gets the condition of this MerchantOrderLineResponse.  # noqa: E501

        The condition of the product, this can be used to indicate that a product is a second-hand product  # noqa: E501

        :return: The condition of this MerchantOrderLineResponse.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this MerchantOrderLineResponse.

        The condition of the product, this can be used to indicate that a product is a second-hand product  # noqa: E501

        :param condition: The condition of this MerchantOrderLineResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "NEW_REFURBISHED", "USED_AS_NEW", "USED_GOOD", "USED_REASONABLE", "USED_MEDIOCRE", "UNKNOWN"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"  # noqa: E501
                .format(condition, allowed_values)
            )

        self._condition = condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantOrderLineResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
